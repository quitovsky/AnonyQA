import { prisma } from "@anonyqa/shared";
import { BotContext } from "@anonyqa/types";
import { Conversation, createConversation } from "@grammyjs/conversations";
import { Composer } from "grammy";
import dedent from "ts-dedent";

const composer = new Composer<BotContext>()

async function answer(conversation: Conversation, ctx: BotContext, questionId: string) {
    await ctx.reply(dedent`
        üí≠ –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç
        `)
    let text = null;
    while (!text) {
        const { message } = await conversation.waitFor("message");
        if (!message.text) {
            await ctx.reply(dedent`
                –±–æ—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ <i>—Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã</i> üò¢

                —Å–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ <b><a href="https://t.me/wannadisappearr">–≤ –∫–∞–Ω–∞–ª–µ</a></b>, –∞ –ø–æ–∫–∞ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:
                `, {
                    parse_mode: "HTML",
                    link_preview_options: {
                        is_disabled: true
                    }
                })
        } else {
            text = message.text
        }
    }
    const question = await prisma.question.findUnique({
        where: {
            nanoid: questionId
        },
        include: {
            author: true
        }
    })
    if (!question) return ctx.reply("—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üò¢");

    const answer = await prisma.answer.create({
        data: {
            answer: text,
            question: {
                connect: {
                    id: question.id
                }
            },
            sender: {
                connectOrCreate: {
                    create: {
                        telegramId: ctx.from.id.toString()
                    },
                    where: {
                        telegramId: ctx.from.id.toString()
                    }
                }
            }
        }
    })
    if (!answer) return ctx.reply("—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üò¢");

    try { 
    await ctx.api.sendMessage(question.author.telegramId, dedent`
        ‚òÖ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å

        ‚ùì: ${question.question}
        üíå: ${answer.answer}
        `);
    } catch { /**/ }
    
    await ctx.reply(`–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!`)


    return
}

composer.use(createConversation(answer, {
    id: "handle-answer",
}))


export const AnswerComposer = composer;
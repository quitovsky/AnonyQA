import { prisma } from '@anonyqa/shared';
import { BotContext } from '@anonyqa/types';
import {
    Composer,
    InlineKeyboard,
    InlineQueryResultBuilder,
} from 'grammy';
import { nanoid } from 'nanoid';
import { ADMIN_ID } from '../../main';
import dedent from 'ts-dedent';

const composer = new Composer<BotContext>();

composer.on('inline_query', async (ctx) => {
    try {
        await ctx.api.sendChatAction(ctx.from.id, "find_location");
    } catch (err) {
        return await ctx.answerInlineQuery([], {
            button: { text: "–Ω–∞–∂–º–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ^_^", start_parameter: "start" },
            is_personal: true 
        })
    }
    const query = ctx.inlineQuery.query;
    if (!query) return;
    const id = nanoid();
    const result = InlineQueryResultBuilder.article(
        `publish:${id}`,
        `‚ùì ${ctx.inlineQuery.query}`,
        {
            reply_markup: new InlineKeyboard().url(
                '–∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞',
                'https://t.me/anonyqabot?start=faq'
            ),
            description: `–µ—Å–ª–∏ –≤ –∫–∞–Ω–∞–ª–µ –≤–∫–ª—é—á–µ–Ω–æ –ø–æ–¥–ø—Å—ã–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, —É–±–µ–¥–∏—Å—å, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–µ –æ—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞`,
        }
    ).text('', {
        parse_mode: 'HTML',
        message_text: dedent`
        ‚ùóÔ∏è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏
        `
    });
    await ctx.answerInlineQuery([result], { cache_time: 0 });
});

composer.on("chosen_inline_result", async ctx => {
    const { result_id, query } = ctx.chosenInlineResult;
    await ctx.editMessageText(dedent`
        ‚ùì –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        
        ${query}
        `, {
            reply_markup: new InlineKeyboard()
                .url(
                    `–æ—Ç–≤–µ—Ç–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ`,
                    `https://t.me/anonyqabot?start=anon${result_id.substring(8)}`
                )
        })
    try {
        const q = await prisma.question.create({
            data: {
                nanoid: result_id.substring(8),
                question: query,
                author: {
                    connectOrCreate: {
                        where: {
                            telegramId: ctx.from.id.toString()
                        },
                        create: {
                            telegramId: ctx.from.id.toString()
                        }
                    }
                }
            }
        })

        // !DEBUG
        try {
            await ctx.api.sendMessage(ADMIN_ID, dedent`
            üëÅÔ∏è‚Äçüó®Ô∏è –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
            <tg-spoiler>
            ‚ùì: ${q.question}
            üë§: <a href="tg://user?id=${ctx.from.id}">${ctx.from.first_name}</a>${ctx.from.username ? ` (@${ctx.from.username})` : ""}

            ${q.createdAt.toLocaleString("ru-RU")}
            #q${q.nanoid}
            </tg-spoiler>
            `, {
                parse_mode: "HTML"
            })
        } catch (e) {
            console.error(e)
        }
    }
    catch (err) {
        console.error(err)
        await ctx.editMessageText("üò¢ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ")
    }
})

export const QuestionsComposer = composer;
